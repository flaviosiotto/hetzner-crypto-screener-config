version: "3.9"

services:

  reverse-proxy:
    image: traefik:v3.0
    command:
      - --providers.swarm=true
      - --entryPoints.web.address=:8000
      - --entryPoints.web.asdefault=true
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      - --log.level=INFO
      - --api=true
      - --api.dashboard=true
      - --providers.docker.exposedbydefault=false

    networks: 
      - si8cloud
    ports:
      - "8000:8000"

    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.dashboard.rule=Host(`traefik.si8cloud.localhost`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
        - "traefik.http.routers.dashboard.service=api@internal"
        - "traefik.http.routers.dashboard.tls=false"
        # Dummy service for Swarm port detection. The port can be any valid integer value.
        - "traefik.http.services.dummy-svc.loadbalancer.server.port=9999"

      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


  postgres:
    image: postgres:13-alpine
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.postgres.rule=Host(`postgres.si8cloud.localhost`)
        - traefik.http.services.postgres-service.loadbalancer.server.port=5432
        - traefik.http.routers.whoami.entrypoints=web
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - ${POSTGRES_DATA_DIR}:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    user: 1000:1000


  pgadmin:
    image: dpage/pgadmin4
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.pgadmin.rule=Host(`pgadmin.si8cloud.localhost`)
        - traefik.http.services.pgadmin-service.loadbalancer.server.port=80
        - traefik.http.routers.whoami-http.entrypoints=web
        - traefik.http.routers.whoami-http.middlewares=whoami-https-redirect
        restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - ${PGADMIN_DIR}:/var/lib/pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_LISTEN_PORT=80
      - CONFIG_DATABASE_URI=postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@postgres:5432/{POSTGRES_DB}
    depends_on:
      - postgres


  si8cloud-console-be:
    image: si8cloud-console-be:latest
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.si8cloud-console-be.rule=Host(`api.si8cloud.localhost`)
        - traefik.http.services.si8cloud-console-be-service.loadbalancer.server.port=8000
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - DB_HOST=postgres
      - DB_NAME=${POSTGRES_DB}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_USER=${POSTGRES_USER}
      - DB_PORT=5432
      - SECRET_KEY=loremipsum
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  si8cloud-console-fe:
    image: si8cloud-console-fe:dev
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.si8cloud-console-fe.rule=Host(`console.si8cloud.localhost`)
        - traefik.http.services.si8cloud-console-fe-service.loadbalancer.server.port=5173
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - ${SI8CLOUD_FE_SRC_DIR}:/app
    networks: 
      - si8cloud
    command: vite --host 0.0.0.0
#    depends_on:
#      - si8cloud-console-be


networks:
  si8cloud:
    name: si8cloud
    driver: overlay
    attachable: true
